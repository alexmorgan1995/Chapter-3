melt_amp_pigs$IsolPos <- melt(dataamp_pigs, id.vars = "Country", measure.vars = c("PosIsol_2015", "PosIsol_2016",
"PosIsol_2017", "PosIsol_2018", "PosIsol_2019"))[,3]
colnames(melt_amp_pigs)[c(2,3)] <- c("Year", "Resistance")
#Cleaning Data - Humans
#only include countries/years which are present in the resistance dataset
dataamp_hum <- dataamp_hum[dataamp_hum$Country %in% intersect(dataamp_hum$Country, dataamp_pigs$Country),]
colnames(dataamp_hum)[26:31] <- as.character(2014:2019)
melt_amp_pigs$ResPropHum <- melt(dataamp_hum, id.vars = "Country", measure.vars = pig_yrs)[,3]
melt_amp_pigs <- melt_amp_pigs[!(is.na(melt_amp_pigs$Resistance) | is.na(melt_amp_pigs$usage)),] # Remove all rows with NAs for usage and resistance
#Add 95% CIs for each datapoint
melt_amp_pigs$lower_amp <- unlist(lapply(1:nrow(melt_amp_pigs), function(i) prop.test(melt_amp_pigs$IsolPos[i],melt_amp_pigs$N[i])[[6]][[1]]))
melt_amp_pigs$upper_amp <- unlist(lapply(1:nrow(melt_amp_pigs), function(i) prop.test(melt_amp_pigs$IsolPos[i],melt_amp_pigs$N[i])[[6]][[2]]))
#Rename the columns
colnames(melt_amp_pigs) <- c("Country", "Year", "ResPropAnim", "Usage", "N", "IsolPos", "ResPropHum", "Lower_Amp", "Upper_Amp")
melt_amp_pigs$Usage <- melt_amp_pigs$Usage/1000 #Change from mg/PCU to g/PCU
ggplot(melt_amp_pigs, aes(x = Usage, y= ResPropAnim, color = Country)) + geom_point() +
scale_x_continuous(expand = c(0, 0), limits = c(0,0.055)) + scale_y_continuous(expand = c(0, 0), limits = c(0,1)) +
labs(x ="Livestock Antibiotic Usage (g/PCU)", y = "Antibiotic-Resistant Livestock Carriage")
# Food Usage Dataset ------------------------------------------------------
country_data_imp <- read.csv("FullData_2021_v1_trim.csv") #This is data for pigs
country_data_imp$Corrected_Usage_18 <- country_data_imp$Corrected_Usage_18/100
country_data_imp$Foodborne_Carriage_2019 <- country_data_imp$Foodborne_Carriage_2019/100
country_data_imp[,12:13] <- country_data_imp[,12:13]/1000
UK_amp_res <- as.numeric(rowMeans(dataamp_pigs_raw[dataamp_pigs_raw$Country == "United Kingdom",12:15], na.rm = T))
UK_amp_usage <- as.numeric(rowMeans(dataamp_pigs_raw[dataamp_pigs_raw$Country == "United Kingdom",17:19], na.rm = T)/1000)
UK_cont <- country_data_imp$Foodborne_Carriage_2019[country_data_imp$Country_of_Origin == "UK Origin"]
UK_food_usage <- country_data_imp$Corrected_Usage_18[country_data_imp$Country_of_Origin == "UK Origin"]
#Use the mean for the EU as the parameters (minus the UK) - only the main importers
EU_cont <- mean(country_data_imp$Foodborne_Carriage_2019[2:10])
EU_res <- mean(country_data_imp$Prop_Amp_Res[2:10])
parms2 <- c(ra = 60^-1, rh = (5.5^-1), ua = 240^-1, uh = 28835^-1, psi = 0.656,
fracimp1 = as.numeric(country_data_imp[2,"Normalised_Usage_2018"]), fracimp2 = as.numeric(country_data_imp[3,"Normalised_Usage_2018"]), fracimp3 = as.numeric(country_data_imp[4,"Normalised_Usage_2018"]),
fracimp4 = as.numeric(country_data_imp[5,"Normalised_Usage_2018"]), fracimp5 = as.numeric(country_data_imp[6,"Normalised_Usage_2018"]), fracimp6 = as.numeric(country_data_imp[7,"Normalised_Usage_2018"]),
fracimp7 = as.numeric(country_data_imp[8,"Normalised_Usage_2018"]), fracimp8 = as.numeric(country_data_imp[9,"Normalised_Usage_2018"]),
fracimp9 = as.numeric(country_data_imp[10,"Normalised_Usage_2018"]), fracimp_nEU = 1 - sum(as.numeric(country_data_imp[2:10,"Normalised_Usage_2018"])),
imp1 = country_data_imp[2,"Foodborne_Carriage_2019"], imp2 = country_data_imp[3,"Foodborne_Carriage_2019"], imp3 = country_data_imp[4,"Foodborne_Carriage_2019"], imp4 = country_data_imp[5,"Foodborne_Carriage_2019"],
imp5 = country_data_imp[6,"Foodborne_Carriage_2019"], imp6 = country_data_imp[7,"Foodborne_Carriage_2019"], imp7 = country_data_imp[8,"Foodborne_Carriage_2019"], imp8 = country_data_imp[9,"Foodborne_Carriage_2019"],
imp8 = country_data_imp[9,"Foodborne_Carriage_2019"], imp9 = country_data_imp[10,"Foodborne_Carriage_2019"],
propres_imp1 = country_data_imp[2,"Prop_Amp_Res"], propres_imp2 = country_data_imp[3,"Prop_Amp_Res"], propres_imp3 = country_data_imp[4,"Prop_Amp_Res"], propres_imp4 = country_data_imp[5,"Prop_Amp_Res"],
propres_imp5 = country_data_imp[6,"Prop_Amp_Res"], propres_imp6 = country_data_imp[7,"Prop_Amp_Res"], propres_imp7 = country_data_imp[8,"Prop_Amp_Res"], propres_imp8 = country_data_imp[9,"Prop_Amp_Res"],
propres_imp9 = country_data_imp[10,"Prop_Amp_Res"],
betaAA = 0.01, betaHH = 0.01, betaHD = 0.01, betaHI_EU = 0.01, imp_nEU = 0.01, propres_impnEU = 0.1,
phi = 0.01, kappa = 0.01, alpha =  0.4, zeta = 0.01, eta = 0.05,
tau = UK_amp_usage)
init.state = c(Sa=0.98, Isa=0.01, Ira=0.01,
Sh = 1,
IshDA = 0,IrhDA = 0,
IshA1 = 0,IrhA1 = 0,
IshA2 = 0,IrhA2 = 0,
IshA3 = 0,IrhA3 = 0,
IshA4 = 0,IrhA4 = 0,
IshA5 = 0,IrhA5 = 0,
IshA6 = 0,IrhA6 = 0,
IshA7 = 0,IrhA7 = 0,
IshA8 = 0,IrhA8 = 0,
IshA9 = 0,IrhA9 = 0,
IshAnEU = 0,IrhAnEU = 0)
out <- runsteady(y = init.state, func = amrimp, times = c(0, Inf), parms = parms2)
sum(out[[1]])
sum(out[[1]][["Sa"]] + out[[1]][["Isa"]] + out[[1]][["Ira"]])
sum(out[[1]][5:26])
out[[1]][seq(6, 26, by = 2)]
sum(out[[1]][seq(6, 26, by = 2)])
out[[1]][2:3]
# ABC Functions -----------------------------------------------------------
#### Approximate Bayesian Computation - SMC ####
prior.non.zero<-function(par, lm.low, lm.upp){
prod(sapply(1:7, function(a) as.numeric((par[a]-lm.low[a]) > 0) * as.numeric((lm.upp[a]-par[a]) > 0)))
}
#Return the sum of squares between resistance and the model output
sum_square_diff_dist <- function(data.obs, model.obs) {
sumsquare <- (data.obs$ResPropAnim - model.obs$ResPropAnim)^2
return(sum(sumsquare))
}
#Compute the distances for all 3 summary statistics - this section involves running the model
computeDistanceABC_ALEX <- function(distanceABC, fitmodel, tau_range, thetaparm, init.state, data) {
tauoutput <- data.frame(matrix(nrow = length(tau_range), ncol = 5))
tau_range <- append(tau_range, UK_amp_usage)
parms2 = thetaparm
for (i in 1:length(tau_range)) {
parms2["tau"] = tau_range[i]
out <- runsteady(y = init.state, func = fitmodel, times = c(0, Inf), parms = parms2)
tauoutput[i,] <- c(tau_range[i],
((sum(out[[1]][5:26]))*(446000000))/100000,
(out[[1]][["Isa"]] + out[[1]][["Ira"]]),
out[[1]][["Ira"]] / (out[[1]][["Isa"]] + out[[1]][["Ira"]]),
sum(out[[1]][seq(6, 26, by = 2)]) / (sum(out[[1]][5:26])))
}
colnames(tauoutput) <- c("tau", "IncH", "ICombA", "ResPropAnim", "ResPropHum")
return(c(distanceABC(data, tauoutput[(!tauoutput$tau == UK_amp_usage & !tauoutput$tau == 0),]),
abs(tauoutput$IncH[tauoutput$tau == UK_amp_usage] - 0.593),
as.numeric(abs(tauoutput$ResPropHum[tauoutput$tau == UK_amp_usage] - UK_hum_ampres)),
abs(tauoutput$ICombA[tauoutput$tau == UK_amp_usage] - UK_cont),
abs(tauoutput$ResPropAnim[tauoutput$tau == UK_amp_usage] - UK_amp_res)))
}
computeDistanceABC_ALEX(distanceABC = sum_square_diff_dist,
fitmodel = amrimp,
tau_range = melt_amp_pigs$Usage,
thetaparm = c(ra = 60^-1, rh = (5.5^-1), ua = 240^-1, uh = 28835^-1, psi = 0.656,
fracimp1 = as.numeric(country_data_imp[2,"Normalised_Usage_2018"]), fracimp2 = as.numeric(country_data_imp[3,"Normalised_Usage_2018"]), fracimp3 = as.numeric(country_data_imp[4,"Normalised_Usage_2018"]),
fracimp4 = as.numeric(country_data_imp[5,"Normalised_Usage_2018"]), fracimp5 = as.numeric(country_data_imp[6,"Normalised_Usage_2018"]), fracimp6 = as.numeric(country_data_imp[7,"Normalised_Usage_2018"]),
fracimp7 = as.numeric(country_data_imp[8,"Normalised_Usage_2018"]), fracimp8 = as.numeric(country_data_imp[9,"Normalised_Usage_2018"]),
fracimp9 = as.numeric(country_data_imp[10,"Normalised_Usage_2018"]), fracimp_nEU = 1 - sum(as.numeric(country_data_imp[2:10,"Normalised_Usage_2018"])),
imp1 = country_data_imp[2,"Foodborne_Carriage_2019"], imp2 = country_data_imp[3,"Foodborne_Carriage_2019"], imp3 = country_data_imp[4,"Foodborne_Carriage_2019"], imp4 = country_data_imp[5,"Foodborne_Carriage_2019"],
imp5 = country_data_imp[6,"Foodborne_Carriage_2019"], imp6 = country_data_imp[7,"Foodborne_Carriage_2019"], imp7 = country_data_imp[8,"Foodborne_Carriage_2019"], imp8 = country_data_imp[9,"Foodborne_Carriage_2019"],
imp8 = country_data_imp[9,"Foodborne_Carriage_2019"], imp9 = country_data_imp[10,"Foodborne_Carriage_2019"],
propres_imp1 = country_data_imp[2,"Prop_Amp_Res"], propres_imp2 = country_data_imp[3,"Prop_Amp_Res"], propres_imp3 = country_data_imp[4,"Prop_Amp_Res"], propres_imp4 = country_data_imp[5,"Prop_Amp_Res"],
propres_imp5 = country_data_imp[6,"Prop_Amp_Res"], propres_imp6 = country_data_imp[7,"Prop_Amp_Res"], propres_imp7 = country_data_imp[8,"Prop_Amp_Res"], propres_imp8 = country_data_imp[9,"Prop_Amp_Res"],
propres_imp9 = country_data_imp[10,"Prop_Amp_Res"],
eta = 0.05,
betaAA = 0.1, phi = 0.1, kappa = 0.1, alpha = 0.3, zeta = 0.1, betaHD = 0.1,
betaHI = 0.1, betaHI_EU = 0.1, imp_nEU = 0.1, propres_impnEU = 0.1),
init.state =  c(Sa=0.98, Isa=0.01, Ira=0.01,
Sh = 1,
IshDA = 0,IrhDA = 0,
IshA1 = 0,IrhA1 = 0,
IshA2 = 0,IrhA2 = 0,
IshA3 = 0,IrhA3 = 0,
IshA4 = 0,IrhA4 = 0,
IshA5 = 0,IrhA5 = 0,
IshA6 = 0,IrhA6 = 0,
IshA7 = 0,IrhA7 = 0,
IshA8 = 0,IrhA8 = 0,
IshA9 = 0,IrhA9 = 0,
IshAnEU = 0,IrhAnEU = 0),
data = melt_amp_pigs)
1.302672e+02
library("deSolve"); library("ggplot2"); library("plotly"); library("reshape2"); library("sensitivity"); library("parallel")
library("bayestestR"); library("tmvtnorm"); library("ggpubr"); library("cowplot"); library("lhs"); library("Surrogate"); library("rootSolve")
rm(list=ls())
setwd("C:/Users/amorg/Documents/PhD/Chapter_3/Models/Chapter-3/Model_Fit_Data")
# Single Model ------------------------------------------------------------
amrimp <- function(t, y, parms) {
with(as.list(c(y, parms)), {
dSa = ua + ra*(Isa + Ira) + kappa*tau*Isa - (betaAA*Isa*Sa) - (1-alpha)*(betaAA*Ira*Sa) - ua*Sa -
0.5*zeta*Sa*(1-alpha) - 0.5*zeta*Sa
dIsa = betaAA*Isa*Sa + phi*Ira - kappa*tau*Isa - tau*Isa - ra*Isa - ua*Isa + 0.5*zeta*Sa
dIra = (1-alpha)*betaAA*Ira*Sa + tau*Isa - phi*Ira - ra*Ira - ua*Ira + 0.5*zeta*Sa*(1-alpha)
dSh = uh + rh*(1-Sh) - uh*Sh -
psi*(betaHD*Isa*eta*Sh) -
psi*(1-alpha)*(betaHD*Ira*eta*Sh) -
(1-psi)*(imp1)*(betaHI_EU*fracimp1*(1-propres_imp1)*Sh) -
(1-psi)*(imp1)*(1-alpha)*(betaHI_EU*fracimp1*propres_imp1*Sh)-
(1-psi)*(imp2)*(betaHI_EU*fracimp2*(1-propres_imp2)*Sh) -
(1-psi)*(imp2)*(1-alpha)*(betaHI_EU*fracimp2*propres_imp2*Sh) -
(1-psi)*(imp3)*(betaHI_EU*fracimp3*(1-propres_imp3)*Sh) -
(1-psi)*(imp3)*(1-alpha)*(betaHI_EU*fracimp3*propres_imp3*Sh) -
(1-psi)*(imp4)*(betaHI_EU*fracimp4*(1-propres_imp4)*Sh) -
(1-psi)*(imp4)*(1-alpha)*(betaHI_EU*fracimp4*propres_imp4*Sh)-
(1-psi)*(imp5)*(betaHI_EU*fracimp5*(1-propres_imp5)*Sh) -
(1-psi)*(imp5)*(1-alpha)*(betaHI_EU*fracimp5*propres_imp5*Sh) -
(1-psi)*(imp6)*(betaHI_EU*fracimp6*(1-propres_imp6)*Sh) -
(1-psi)*(imp6)*(1-alpha)*(betaHI_EU*fracimp6*propres_imp6*Sh) -
(1-psi)*(imp7)*(betaHI_EU*fracimp7*(1-propres_imp7)*Sh) -
(1-psi)*(imp7)*(1-alpha)*(betaHI_EU*fracimp7*propres_imp7*Sh) -
(1-psi)*(imp8)*(betaHI_EU*fracimp8*(1-propres_imp8)*Sh) -
(1-psi)*(imp8)*(1-alpha)*(betaHI_EU*fracimp8*propres_imp8*Sh) -
(1-psi)*(imp9)*(betaHI_EU*fracimp9*(1-propres_imp9)*Sh) -
(1-psi)*(imp9)*(1-alpha)*(betaHI_EU*fracimp9*propres_imp9*Sh) -
(1-psi)*(imp_nEU)*(betaHI_EU*fracimp_nEU*(1-propres_impnEU)*Sh) -
(1-psi)*(imp_nEU)*(1-alpha)*(betaHI_EU*fracimp_nEU*propres_impnEU*Sh)
dIshDA = psi*betaHD*(Isa*eta)*Sh - rh*IshDA - uh*IshDA
dIrhDA = psi*(1-alpha)*betaHD*(Ira*eta)*Sh - rh*IrhDA - uh*IrhDA
dIshA1 = (1-psi)*(imp1)*(betaHI_EU*fracimp1*(1-propres_imp1)*Sh) - rh*IshA1 - uh*IshA1
dIrhA1 = (1-psi)*(imp1)*(1-alpha)*(betaHI_EU*fracimp1*propres_imp1*Sh) - rh*IrhA1 - uh*IrhA1
dIshA2 = (1-psi)*(imp2)*(betaHI_EU*fracimp2*(1-propres_imp2)*Sh) - rh*IshA2 - uh*IshA2
dIrhA2 = (1-psi)*(imp2)*(1-alpha)*(betaHI_EU*fracimp2*propres_imp2*Sh)  - rh*IrhA2 - uh*IrhA2
dIshA3 = (1-psi)*(imp3)*(betaHI_EU*fracimp3*(1-propres_imp3)*Sh) - rh*IshA3 - uh*IshA3
dIrhA3 = (1-psi)*(imp3)*(1-alpha)*(betaHI_EU*fracimp3*propres_imp3*Sh) - rh*IrhA3 - uh*IrhA3
dIshA4 = (1-psi)*(imp4)*(betaHI_EU*fracimp4*(1-propres_imp4)*Sh) - rh*IshA4 - uh*IshA4
dIrhA4 = (1-psi)*(imp4)*(1-alpha)*(betaHI_EU*fracimp1*propres_imp4*Sh) - rh*IrhA4 - uh*IrhA4
dIshA5 = (1-psi)*(imp5)*(betaHI_EU*fracimp5*(1-propres_imp5)*Sh) - rh*IshA5 - uh*IshA5
dIrhA5 = (1-psi)*(imp5)*(1-alpha)*(betaHI_EU*fracimp5*propres_imp5*Sh)  - rh*IrhA5 - uh*IrhA5
dIshA6 = (1-psi)*(imp6)*(betaHI_EU*fracimp6*(1-propres_imp6)*Sh) - rh*IshA6 - uh*IshA6
dIrhA6 = (1-psi)*(imp6)*(1-alpha)*(betaHI_EU*fracimp6*propres_imp6*Sh) - rh*IrhA6 - uh*IrhA6
dIshA7 = (1-psi)*(imp7)*(betaHI_EU*fracimp7*(1-propres_imp7)*Sh) - rh*IshA7 - uh*IshA7
dIrhA7 = (1-psi)*(imp7)*(1-alpha)*(betaHI_EU*fracimp7*propres_imp7*Sh) - rh*IrhA7 - uh*IrhA7
dIshA8 = (1-psi)*(imp8)*(betaHI_EU*fracimp8*(1-propres_imp8)*Sh) - rh*IshA8 - uh*IshA8
dIrhA8 = (1-psi)*(imp8)*(1-alpha)*(betaHI_EU*fracimp8*propres_imp8*Sh)  - rh*IrhA8 - uh*IrhA8
dIshA9 = (1-psi)*(imp9)*(betaHI_EU*fracimp9*(1-propres_imp9)*Sh) - rh*IshA9 - uh*IshA9
dIrhA9 = (1-psi)*(imp9)*(1-alpha)*(betaHI_EU*fracimp9*propres_imp9*Sh) - rh*IrhA9 - uh*IrhA9
dIshAnEU = (1-psi)*(imp_nEU)*(betaHI_EU*fracimp_nEU*(1-propres_impnEU)*Sh) - rh*IshAnEU - uh*IshAnEU
dIrhAnEU = (1-psi)*(imp_nEU)*(1-alpha)*(betaHI_EU*fracimp_nEU*propres_impnEU*Sh) - rh*IrhAnEU - uh*IrhAnEU
CumS = psi*betaHD*(Isa*eta)*Sh +
(1-psi)*(imp1)*(betaHI_EU*fracimp1*(1-propres_imp1)*Sh) +
(1-psi)*(imp2)*(betaHI_EU*fracimp2*(1-propres_imp2)*Sh) +
(1-psi)*(imp3)*(betaHI_EU*fracimp3*(1-propres_imp3)*Sh) +
(1-psi)*(imp4)*(betaHI_EU*fracimp4*(1-propres_imp4)*Sh) +
(1-psi)*(imp5)*(betaHI_EU*fracimp5*(1-propres_imp5)*Sh) +
(1-psi)*(imp6)*(betaHI_EU*fracimp6*(1-propres_imp6)*Sh) +
(1-psi)*(imp7)*(betaHI_EU*fracimp7*(1-propres_imp7)*Sh) +
(1-psi)*(imp8)*(betaHI_EU*fracimp8*(1-propres_imp8)*Sh) +
(1-psi)*(imp9)*(betaHI_EU*fracimp9*(1-propres_imp9)*Sh) +
(1-psi)*(imp_nEU)*(betaHI_EU*fracimp_nEU*(1-propres_impnEU)*Sh)
CumR = psi*(1-alpha)*betaHD*(Ira*eta)*Sh +
(1-psi)*(imp1)*(1-alpha)*(betaHI_EU*fracimp1*propres_imp1*Sh) +
(1-psi)*(imp2)*(1-alpha)*(betaHI_EU*fracimp2*propres_imp2*Sh) +
(1-psi)*(imp3)*(1-alpha)*(betaHI_EU*fracimp3*propres_imp3*Sh) +
(1-psi)*(imp4)*(1-alpha)*(betaHI_EU*fracimp4*propres_imp4*Sh) +
(1-psi)*(imp5)*(1-alpha)*(betaHI_EU*fracimp5*propres_imp5*Sh) +
(1-psi)*(imp6)*(1-alpha)*(betaHI_EU*fracimp6*propres_imp6*Sh) +
(1-psi)*(imp7)*(1-alpha)*(betaHI_EU*fracimp7*propres_imp7*Sh) +
(1-psi)*(imp8)*(1-alpha)*(betaHI_EU*fracimp8*propres_imp8*Sh) +
(1-psi)*(imp9)*(1-alpha)*(betaHI_EU*fracimp9*propres_imp9*Sh) +
(1-psi)*(imp_nEU)*(1-alpha)*(betaHI_EU*fracimp_nEU*propres_impnEU*Sh)
return(list(c(dSa,dIsa,dIra,
dSh,
dIshDA,dIrhDA,
dIshA1,dIrhA1,
dIshA2,dIrhA2,
dIshA3,dIrhA3,
dIshA4,dIrhA4,
dIshA5,dIrhA5,
dIshA6,dIrhA6,
dIshA7,dIrhA7,
dIshA8,dIrhA8,
dIshA9,dIrhA9,
dIshAnEU,dIrhAnEU),
CumS, CumR))
})
}
# Livestock Dynamics Dataset ----------------------------------------------
#Import Data
dataamp_pigs_raw <- read.csv("Amp_FatPigs_Comb.csv"); dataamp_pigs <- dataamp_pigs_raw
dataamp_hum_raw <- read.csv("Hum_FatPigs.csv"); dataamp_hum <- dataamp_hum_raw
UK_hum_ampres <- rowMeans(dataamp_hum_raw[dataamp_hum_raw$Country == "United Kingdom",][,27:30], na.rm = T)
#Cleaning Data - Animals
dataamp_pigs[,(2+5):(6+5)][dataamp_pigs[,2:6] < 10] <- NA #If N > 10, replace the particular country/year with NA for the No. of pos isolates
dataamp_pigs[,(2+10):(6+10)][dataamp_pigs[,2:6] < 10] <- NA #If N > 10, replace the particular country/year with NA for the prop of resistant isolates
dataamp_pigs[,2:6][dataamp_pigs[,2:6] < 10] <- NA #If N > 10, replace the particular country/year with NA for N
dataamp_pigs <- dataamp_pigs[!(is.na(dataamp_pigs$N_2015) & is.na(dataamp_pigs$N_2016) & is.na(dataamp_pigs$N_2017) &
is.na(dataamp_pigs$N_2018) & is.na(dataamp_pigs$N_2019)),]
pig_yrs <- sub("N_", "", grep("N_20",colnames(dataamp_pigs), value = TRUE)) #Find years of the EFSA and ESVAC data in the dataset
colnames(dataamp_pigs)[12:16] <- pig_yrs
#Create dataset where each row is a different observation.
melt_amp_pigs <- melt(dataamp_pigs, id.vars = "Country", measure.vars = pig_yrs)
melt_amp_pigs$usage <- melt(dataamp_pigs, id.vars = "Country", measure.vars = c("scale_ampusage_2015", "scale_ampusage_2016",
"scale_ampusage_2017", "scale_ampusage_2018", "scale_ampusage_2019"))[,3]
melt_amp_pigs$N <- melt(dataamp_pigs, id.vars = "Country", measure.vars = c("N_2015", "N_2016",
"N_2017", "N_2018", "N_2019"))[,3]
melt_amp_pigs$IsolPos <- melt(dataamp_pigs, id.vars = "Country", measure.vars = c("PosIsol_2015", "PosIsol_2016",
"PosIsol_2017", "PosIsol_2018", "PosIsol_2019"))[,3]
colnames(melt_amp_pigs)[c(2,3)] <- c("Year", "Resistance")
#Cleaning Data - Humans
#only include countries/years which are present in the resistance dataset
dataamp_hum <- dataamp_hum[dataamp_hum$Country %in% intersect(dataamp_hum$Country, dataamp_pigs$Country),]
colnames(dataamp_hum)[26:31] <- as.character(2014:2019)
melt_amp_pigs$ResPropHum <- melt(dataamp_hum, id.vars = "Country", measure.vars = pig_yrs)[,3]
melt_amp_pigs <- melt_amp_pigs[!(is.na(melt_amp_pigs$Resistance) | is.na(melt_amp_pigs$usage)),] # Remove all rows with NAs for usage and resistance
#Add 95% CIs for each datapoint
melt_amp_pigs$lower_amp <- unlist(lapply(1:nrow(melt_amp_pigs), function(i) prop.test(melt_amp_pigs$IsolPos[i],melt_amp_pigs$N[i])[[6]][[1]]))
melt_amp_pigs$upper_amp <- unlist(lapply(1:nrow(melt_amp_pigs), function(i) prop.test(melt_amp_pigs$IsolPos[i],melt_amp_pigs$N[i])[[6]][[2]]))
#Rename the columns
colnames(melt_amp_pigs) <- c("Country", "Year", "ResPropAnim", "Usage", "N", "IsolPos", "ResPropHum", "Lower_Amp", "Upper_Amp")
melt_amp_pigs$Usage <- melt_amp_pigs$Usage/1000 #Change from mg/PCU to g/PCU
ggplot(melt_amp_pigs, aes(x = Usage, y= ResPropAnim, color = Country)) + geom_point() +
scale_x_continuous(expand = c(0, 0), limits = c(0,0.055)) + scale_y_continuous(expand = c(0, 0), limits = c(0,1)) +
labs(x ="Livestock Antibiotic Usage (g/PCU)", y = "Antibiotic-Resistant Livestock Carriage")
# Food Usage Dataset ------------------------------------------------------
country_data_imp <- read.csv("FullData_2021_v1_trim.csv") #This is data for pigs
country_data_imp$Corrected_Usage_18 <- country_data_imp$Corrected_Usage_18/100
country_data_imp$Foodborne_Carriage_2019 <- country_data_imp$Foodborne_Carriage_2019/100
country_data_imp[,12:13] <- country_data_imp[,12:13]/1000
UK_amp_res <- as.numeric(rowMeans(dataamp_pigs_raw[dataamp_pigs_raw$Country == "United Kingdom",12:15], na.rm = T))
UK_amp_usage <- as.numeric(rowMeans(dataamp_pigs_raw[dataamp_pigs_raw$Country == "United Kingdom",17:19], na.rm = T)/1000)
UK_cont <- country_data_imp$Foodborne_Carriage_2019[country_data_imp$Country_of_Origin == "UK Origin"]
UK_food_usage <- country_data_imp$Corrected_Usage_18[country_data_imp$Country_of_Origin == "UK Origin"]
#Use the mean for the EU as the parameters (minus the UK) - only the main importers
EU_cont <- mean(country_data_imp$Foodborne_Carriage_2019[2:10])
EU_res <- mean(country_data_imp$Prop_Amp_Res[2:10])
parms2 <- c(ra = 60^-1, rh = (5.5^-1), ua = 240^-1, uh = 28835^-1, psi = 0.656,
fracimp1 = as.numeric(country_data_imp[2,"Normalised_Usage_2018"]), fracimp2 = as.numeric(country_data_imp[3,"Normalised_Usage_2018"]), fracimp3 = as.numeric(country_data_imp[4,"Normalised_Usage_2018"]),
fracimp4 = as.numeric(country_data_imp[5,"Normalised_Usage_2018"]), fracimp5 = as.numeric(country_data_imp[6,"Normalised_Usage_2018"]), fracimp6 = as.numeric(country_data_imp[7,"Normalised_Usage_2018"]),
fracimp7 = as.numeric(country_data_imp[8,"Normalised_Usage_2018"]), fracimp8 = as.numeric(country_data_imp[9,"Normalised_Usage_2018"]),
fracimp9 = as.numeric(country_data_imp[10,"Normalised_Usage_2018"]), fracimp_nEU = 1 - sum(as.numeric(country_data_imp[2:10,"Normalised_Usage_2018"])),
imp1 = country_data_imp[2,"Foodborne_Carriage_2019"], imp2 = country_data_imp[3,"Foodborne_Carriage_2019"], imp3 = country_data_imp[4,"Foodborne_Carriage_2019"], imp4 = country_data_imp[5,"Foodborne_Carriage_2019"],
imp5 = country_data_imp[6,"Foodborne_Carriage_2019"], imp6 = country_data_imp[7,"Foodborne_Carriage_2019"], imp7 = country_data_imp[8,"Foodborne_Carriage_2019"], imp8 = country_data_imp[9,"Foodborne_Carriage_2019"],
imp8 = country_data_imp[9,"Foodborne_Carriage_2019"], imp9 = country_data_imp[10,"Foodborne_Carriage_2019"],
propres_imp1 = country_data_imp[2,"Prop_Amp_Res"], propres_imp2 = country_data_imp[3,"Prop_Amp_Res"], propres_imp3 = country_data_imp[4,"Prop_Amp_Res"], propres_imp4 = country_data_imp[5,"Prop_Amp_Res"],
propres_imp5 = country_data_imp[6,"Prop_Amp_Res"], propres_imp6 = country_data_imp[7,"Prop_Amp_Res"], propres_imp7 = country_data_imp[8,"Prop_Amp_Res"], propres_imp8 = country_data_imp[9,"Prop_Amp_Res"],
propres_imp9 = country_data_imp[10,"Prop_Amp_Res"],
betaAA = 0.01, betaHH = 0.01, betaHD = 0.01, betaHI_EU = 0.01, imp_nEU = 0.01, propres_impnEU = 0.1,
phi = 0.01, kappa = 0.01, alpha =  0.4, zeta = 0.01, eta = 0.05,
tau = UK_amp_usage)
init.state = c(Sa=0.98, Isa=0.01, Ira=0.01,
Sh = 1,
IshDA = 0,IrhDA = 0,
IshA1 = 0,IrhA1 = 0,
IshA2 = 0,IrhA2 = 0,
IshA3 = 0,IrhA3 = 0,
IshA4 = 0,IrhA4 = 0,
IshA5 = 0,IrhA5 = 0,
IshA6 = 0,IrhA6 = 0,
IshA7 = 0,IrhA7 = 0,
IshA8 = 0,IrhA8 = 0,
IshA9 = 0,IrhA9 = 0,
IshAnEU = 0,IrhAnEU = 0)
out <- runsteady(y = init.state, func = amrimp, times = c(0, Inf), parms = parms2)
sum(out[[1]])
sum(out[[1]][["Sa"]] + out[[1]][["Isa"]] + out[[1]][["Ira"]])
sum(out[[1]][5:26])
out[[1]][seq(6, 26, by = 2)]
sum(out[[1]][seq(6, 26, by = 2)])
out[[1]][2:3]
# ABC Functions -----------------------------------------------------------
#### Approximate Bayesian Computation - SMC ####
prior.non.zero<-function(par, lm.low, lm.upp){
prod(sapply(1:7, function(a) as.numeric((par[a]-lm.low[a]) > 0) * as.numeric((lm.upp[a]-par[a]) > 0)))
}
#Return the sum of squares between resistance and the model output
sum_square_diff_dist <- function(data.obs, model.obs) {
sumsquare <- (data.obs$ResPropAnim - model.obs$ResPropAnim)^2
return(sum(sumsquare))
}
#Compute the distances for all 3 summary statistics - this section involves running the model
computeDistanceABC_ALEX <- function(distanceABC, fitmodel, tau_range, thetaparm, init.state, data) {
tauoutput <- data.frame(matrix(nrow = length(tau_range), ncol = 5))
tau_range <- append(tau_range, UK_amp_usage)
parms2 = thetaparm
for (i in 1:length(tau_range)) {
parms2["tau"] = tau_range[i]
out <- runsteady(y = init.state, func = fitmodel, times = c(0, Inf), parms = parms2)
tauoutput[i,] <- c(tau_range[i],
((sum(out[[1]][5:26]))*(446000000))/100000,
(out[[1]][["Isa"]] + out[[1]][["Ira"]]),
out[[1]][["Ira"]] / (out[[1]][["Isa"]] + out[[1]][["Ira"]]),
sum(out[[1]][seq(6, 26, by = 2)]) / (sum(out[[1]][5:26])))
}
colnames(tauoutput) <- c("tau", "IncH", "ICombA", "ResPropAnim", "ResPropHum")
return(c(distanceABC(data, tauoutput[(!tauoutput$tau == UK_amp_usage & !tauoutput$tau == 0),]),
abs(tauoutput$IncH[tauoutput$tau == UK_amp_usage] - 0.593),
as.numeric(abs(tauoutput$ResPropHum[tauoutput$tau == UK_amp_usage] - UK_hum_ampres)),
abs(tauoutput$ICombA[tauoutput$tau == UK_amp_usage] - UK_cont),
abs(tauoutput$ResPropAnim[tauoutput$tau == UK_amp_usage] - UK_amp_res)))
}
computeDistanceABC_ALEX(distanceABC = sum_square_diff_dist,
fitmodel = amrimp,
tau_range = melt_amp_pigs$Usage,
thetaparm = c(ra = 60^-1, rh = (5.5^-1), ua = 240^-1, uh = 28835^-1, psi = 0.656,
fracimp1 = as.numeric(country_data_imp[2,"Normalised_Usage_2018"]), fracimp2 = as.numeric(country_data_imp[3,"Normalised_Usage_2018"]), fracimp3 = as.numeric(country_data_imp[4,"Normalised_Usage_2018"]),
fracimp4 = as.numeric(country_data_imp[5,"Normalised_Usage_2018"]), fracimp5 = as.numeric(country_data_imp[6,"Normalised_Usage_2018"]), fracimp6 = as.numeric(country_data_imp[7,"Normalised_Usage_2018"]),
fracimp7 = as.numeric(country_data_imp[8,"Normalised_Usage_2018"]), fracimp8 = as.numeric(country_data_imp[9,"Normalised_Usage_2018"]),
fracimp9 = as.numeric(country_data_imp[10,"Normalised_Usage_2018"]), fracimp_nEU = 1 - sum(as.numeric(country_data_imp[2:10,"Normalised_Usage_2018"])),
imp1 = country_data_imp[2,"Foodborne_Carriage_2019"], imp2 = country_data_imp[3,"Foodborne_Carriage_2019"], imp3 = country_data_imp[4,"Foodborne_Carriage_2019"], imp4 = country_data_imp[5,"Foodborne_Carriage_2019"],
imp5 = country_data_imp[6,"Foodborne_Carriage_2019"], imp6 = country_data_imp[7,"Foodborne_Carriage_2019"], imp7 = country_data_imp[8,"Foodborne_Carriage_2019"], imp8 = country_data_imp[9,"Foodborne_Carriage_2019"],
imp8 = country_data_imp[9,"Foodborne_Carriage_2019"], imp9 = country_data_imp[10,"Foodborne_Carriage_2019"],
propres_imp1 = country_data_imp[2,"Prop_Amp_Res"], propres_imp2 = country_data_imp[3,"Prop_Amp_Res"], propres_imp3 = country_data_imp[4,"Prop_Amp_Res"], propres_imp4 = country_data_imp[5,"Prop_Amp_Res"],
propres_imp5 = country_data_imp[6,"Prop_Amp_Res"], propres_imp6 = country_data_imp[7,"Prop_Amp_Res"], propres_imp7 = country_data_imp[8,"Prop_Amp_Res"], propres_imp8 = country_data_imp[9,"Prop_Amp_Res"],
propres_imp9 = country_data_imp[10,"Prop_Amp_Res"],
eta = 0.05,
betaAA = 0.1, phi = 0.1, kappa = 0.1, alpha = 0.3, zeta = 0.1, betaHD = 0.1,
betaHI = 0.1, betaHI_EU = 0.1, imp_nEU = 0.1, propres_impnEU = 0.1),
init.state =  c(Sa=0.98, Isa=0.01, Ira=0.01,
Sh = 1,
IshDA = 0,IrhDA = 0,
IshA1 = 0,IrhA1 = 0,
IshA2 = 0,IrhA2 = 0,
IshA3 = 0,IrhA3 = 0,
IshA4 = 0,IrhA4 = 0,
IshA5 = 0,IrhA5 = 0,
IshA6 = 0,IrhA6 = 0,
IshA7 = 0,IrhA7 = 0,
IshA8 = 0,IrhA8 = 0,
IshA9 = 0,IrhA9 = 0,
IshAnEU = 0,IrhAnEU = 0),
data = melt_amp_pigs)
singlerun <- function(x, G, init.state, distanceABC, fitmodel, thetaparm, epsilon,
tau_range, data, lm.low, lm.upp, w.old, sigma, res.old, N) {
i <- 0
m <- 0
w.new <- 0
while(i <= 1) {
m <- m + 1
if(G == 1) {
d_betaAA <- runif(1, min = 0, max = 0.05)
d_phi <- runif(1, min = 0, max = 0.1)
d_kappa <- runif(1, min = 0, max = 10)
d_alpha <- rbeta(1, 1.5, 8.5)
d_zeta <- runif(1, 0, 0.001)
d_betaHD <- runif(1, 0, 0.001)
d_betaHI_EU <- runif(1, 0, 0.0005)
d_imp_nEU <- runif(1, 0, 1)
d_propres_impnEU <- runif(1, 0, 1)
} else {
p <- sample(seq(1,N),1,prob = w.old) # check w.old here
par <- rtmvnorm(1,mean=res.old[p,], sigma=sigma, lower=lm.low, upper=lm.upp)
d_betaAA<-par[1]
d_phi<-par[2]
d_kappa<-par[3]
d_alpha<-par[4]
d_zeta <- par[5]
d_betaHD <- par[6]
d_betaHI_EU <- par[7]
d_imp_nEU <- par[8]
d_propres_impnEU <- par[9]
}
new.parms = c(d_betaAA, d_phi, d_kappa, d_alpha, d_zeta, d_betaHD, d_betaHI_EU, d_imp_nEU, d_propres_impnEU)
if(prior.non.zero(new.parms, lm.low, lm.upp)) {
thetaparm[c("betaAA", "phi", "kappa", "alpha", "zeta", "betaHD", "betaHI", "betaHI_EU", "imp_nEU", "propres_impnEU")] <- new.parms
dist_mod <- computeDistanceABC_ALEX(distanceABC, fitmodel, tau_range, thetaparm, init.state, data)
if((dist_mod[1] <= epsilon[["dist"]][G]) && (dist_mod[2] <= epsilon[["foodH"]][G]) && (dist_mod[3] <= epsilon[["AMRH"]][G]) &&
(dist_mod[4] <= epsilon[["foodA"]][G]) && (dist_mod[5] <= epsilon[["AMRA"]][G]) && (!is.na(dist_mod))) {
if(G==1){
w.new <- 1
} else {
w1 <- prod(c(sapply(c(1:3,5:9), function(b) dunif(new.parms[b], min=lm.low[b], max=lm.upp[b])),
dbeta(new.parms[4], 1.5, 8.5)))
w2 <- sum(sapply(1:N, function(a) w.old[a]* dtmvnorm(new.parms, mean=res.old[a,], sigma=sigma, lower=lm.low, upper=lm.upp)))
w.new <- w1/w2
}
i <- i + 1
return(list(dist_mod, m, new.parms, w.new))
}
}
}
}
ABC_algorithm <- function(N, G, distanceABC, fitmodel, tau_range, init.state, data, epsilon, lm.low, lm.upp, thetaparm)  {
out <- list()
for(g in 1:G) {
print(paste0("Generation ", g, " | Time: ", Sys.time()))
if(g == 1) {
sigma <- 0
res.old <- 0
w.old <- 0
}
clusterExport(cl, varlist = c("amrimp", "computeDistanceABC_ALEX", "prior.non.zero", "sum_square_diff_dist",
"melt_amp_pigs", "UK_amp_res", "UK_amp_usage", "UK_cont", "UK_hum_ampres"))
particles <- parLapply(cl,
1:N,
singlerun,
G = g,
init.state = init.state,
distanceABC = sum_square_diff_dist,
fitmodel = amrimp,
thetaparm = thetaparm,
epsilon = epsilon,
tau_range = melt_amp_pigs$Usage,
data = melt_amp_pigs,
lm.low = lm.low,
lm.upp = lm.upp,
w.old = w.old,
sigma = sigma,
res.old = res.old,
N = N)
dat_dist <- as.matrix(do.call(rbind, lapply(particles, "[[", 1)))
dat_nruns <- do.call(sum, lapply(particles, "[[", 2))
res.new <- as.matrix(do.call(rbind, lapply(particles, "[[", 3)))
w.new <- as.matrix(do.call(rbind, lapply(particles, "[[", 4)))
sigma <- cov(res.new)
res.old <- res.new
w.old <- w.new/sum(w.new)
out[[g]] <- list(dat_nruns, dat_dist, res.old, w.old)
colnames(res.old) <- c("betaAA", "phi", "kappa", "alpha", "zeta", "betaHD", "betaHI", "betaHI_EU", "imp_nEU", "propres_impnEU")
write.csv(res.old, file = paste("C:/Users/amorg/Documents/PhD/Chapter_3/Models/Chapter-3/Model_Fit_Data/ABC_post_complex_amppigs_",g,".csv",sep=""), row.names=FALSE)
}
return(out)
}
# Running the Model Fit ---------------------------------------------------
detectCores()
cl <- makeCluster(10, type="SOCK")
clusterEvalQ(cl, {c(library("rootSolve"), library("tmvtnorm"))})
clusterExport(cl, varlist = c("amrimp", "computeDistanceABC_ALEX", "prior.non.zero", "sum_square_diff_dist",
"melt_amp_pigs", "UK_amp_res", "UK_amp_usage", "UK_cont", "UK_hum_ampres"))
sigma <- 0
res.old <- 0
w.old <- 0
N = 1
particles <- parLapply(cl,
1:N,
singlerun,
G = 1,
init.state = c(Sa=0.98, Isa=0.01, Ira=0.01,
Sh = 1,
IshDA = 0,IrhDA = 0,
IshA1 = 0,IrhA1 = 0,
IshA2 = 0,IrhA2 = 0,
IshA3 = 0,IrhA3 = 0,
IshA4 = 0,IrhA4 = 0,
IshA5 = 0,IrhA5 = 0,
IshA6 = 0,IrhA6 = 0,
IshA7 = 0,IrhA7 = 0,
IshA8 = 0,IrhA8 = 0,
IshA9 = 0,IrhA9 = 0,
IshAnEU = 0,IrhAnEU = 0),
distanceABC = sum_square_diff_dist,
fitmodel = amrimp,
thetaparm = c(ra = 60^-1, rh = (5.5^-1), ua = 240^-1, uh = 28835^-1, psi = 0.656,
fracimp1 = as.numeric(country_data_imp[2,"Normalised_Usage_2018"]), fracimp2 = as.numeric(country_data_imp[3,"Normalised_Usage_2018"]), fracimp3 = as.numeric(country_data_imp[4,"Normalised_Usage_2018"]),
fracimp4 = as.numeric(country_data_imp[5,"Normalised_Usage_2018"]), fracimp5 = as.numeric(country_data_imp[6,"Normalised_Usage_2018"]), fracimp6 = as.numeric(country_data_imp[7,"Normalised_Usage_2018"]),
fracimp7 = as.numeric(country_data_imp[8,"Normalised_Usage_2018"]), fracimp8 = as.numeric(country_data_imp[9,"Normalised_Usage_2018"]),
fracimp9 = as.numeric(country_data_imp[10,"Normalised_Usage_2018"]), fracimp_nEU = 1 - sum(as.numeric(country_data_imp[2:10,"Normalised_Usage_2018"])),
imp1 = country_data_imp[2,"Foodborne_Carriage_2019"], imp2 = country_data_imp[3,"Foodborne_Carriage_2019"], imp3 = country_data_imp[4,"Foodborne_Carriage_2019"], imp4 = country_data_imp[5,"Foodborne_Carriage_2019"],
imp5 = country_data_imp[6,"Foodborne_Carriage_2019"], imp6 = country_data_imp[7,"Foodborne_Carriage_2019"], imp7 = country_data_imp[8,"Foodborne_Carriage_2019"], imp8 = country_data_imp[9,"Foodborne_Carriage_2019"],
imp8 = country_data_imp[9,"Foodborne_Carriage_2019"], imp9 = country_data_imp[10,"Foodborne_Carriage_2019"],
propres_imp1 = country_data_imp[2,"Prop_Amp_Res"], propres_imp2 = country_data_imp[3,"Prop_Amp_Res"], propres_imp3 = country_data_imp[4,"Prop_Amp_Res"], propres_imp4 = country_data_imp[5,"Prop_Amp_Res"],
propres_imp5 = country_data_imp[6,"Prop_Amp_Res"], propres_imp6 = country_data_imp[7,"Prop_Amp_Res"], propres_imp7 = country_data_imp[8,"Prop_Amp_Res"], propres_imp8 = country_data_imp[9,"Prop_Amp_Res"],
propres_imp9 = country_data_imp[10,"Prop_Amp_Res"],
eta = 0.05),
epsilon = list("dist" =  c(5, 5, 5, 5, 5, 5),
"foodH" = c(0.593, 0.593*0.75, 0.593*0.5, 0.593*0.3, 0.593*0.2, 0.593*0.1),
"AMRH" =  c(UK_hum_ampres, UK_hum_ampres*0.75, UK_hum_ampres*0.5, UK_hum_ampres*0.3, UK_hum_ampres*0.2, UK_hum_ampres*0.1),
"foodA" = c(UK_cont, UK_cont*0.75, UK_cont*0.5, UK_cont*0.3, UK_cont*0.2, UK_cont*0.1),
"AMRA" =  c(UK_amp_res, UK_amp_res*0.75, UK_amp_res*0.5, UK_amp_res*0.3, UK_amp_res*0.2, UK_amp_res*0.1)),
tau_range = melt_amp_pigs$Usage,
data = melt_amp_pigs,
lm.low = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
lm.upp = c(1, 1, 100, 1, 0.1, 0.1, 0.1, 0.1, 1, 1),
w.old = w.old,
sigma = sigma,
res.old = res.old,
N = N)
country_data_imp
