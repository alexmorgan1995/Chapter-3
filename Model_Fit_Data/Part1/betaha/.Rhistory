colnames(dataamp_hum)[26:31] <- as.character(2014:2019)
melt_amp_pigs$ResPropHum <- melt(dataamp_hum, id.vars = "Country", measure.vars = pig_yrs)[,3]
melt_amp_pigs <- melt_amp_pigs[!(is.na(melt_amp_pigs$Resistance) | is.na(melt_amp_pigs$usage)),] # Remove all rows with NAs for usage and resistance
#Add 95% CIs for each datapoint
melt_amp_pigs$lower_amp <- unlist(lapply(1:nrow(melt_amp_pigs), function(i) prop.test(melt_amp_pigs$IsolPos[i],melt_amp_pigs$N[i])[[6]][[1]]))
melt_amp_pigs$upper_amp <- unlist(lapply(1:nrow(melt_amp_pigs), function(i) prop.test(melt_amp_pigs$IsolPos[i],melt_amp_pigs$N[i])[[6]][[2]]))
#Rename the columns
colnames(melt_amp_pigs) <- c("Country", "Year", "ResPropAnim", "Usage", "N", "IsolPos", "ResPropHum", "Lower_Amp", "Upper_Amp")
melt_amp_pigs$Usage <- melt_amp_pigs$Usage/1000 #Change from mg/PCU to g/PCU
ggplot(melt_amp_pigs, aes(x = Usage, y= ResPropAnim, color = Country)) + geom_point() +
scale_x_continuous(expand = c(0, 0), limits = c(0,0.055)) + scale_y_continuous(expand = c(0, 0), limits = c(0,1)) +
labs(x ="Livestock Antibiotic Usage (g/PCU)", y = "Antibiotic-Resistant Livestock Carriage")
# Food Usage Dataset ------------------------------------------------------
#country_data_imp <- read.csv("FullData_2021_v1_trim.csv") #This is data for pigs
country_data_imp <- read.csv("ImportDat_AmpPigs_update.csv") #This is data for pigs
country_data_imp[country_data_imp$Country_of_Origin == "UK Origin",23] <- NA
isolamp_hum_raw <- read.csv("UK_parameterisation.csv")
UK_hum_ampres <- rowMeans(isolamp_hum_raw[,25:28], na.rm = T)[2]
UK_amp_res <- as.numeric(rowMeans(isolamp_hum_raw[isolamp_hum_raw$Country_of_Origin == "UK Livestock",25:28], na.rm = T ))
UK_amp_usage <- as.numeric(rowMeans(isolamp_hum_raw[isolamp_hum_raw$Country_of_Origin == "UK Livestock",29:32]))/1000
UK_cont <- as.numeric(isolamp_hum_raw[isolamp_hum_raw$Country_of_Origin == "UK Livestock",24])
UK_food_usage <- isolamp_hum_raw[isolamp_hum_raw$Country_of_Origin == "UK Livestock",2]
UK_food_usage <- isolamp_hum_raw[isolamp_hum_raw$Country_of_Origin == "UK Livestock",2]
UK_food_pig_usage <- isolamp_hum_raw[isolamp_hum_raw$Country_of_Origin == "UK Livestock",4]
#Use the mean for the EU as the parameters (minus the UK) - only the main importers
EU_cont <- mean(rowMeans(country_data_imp[,24:27], na.rm = T))
EU_res <- mean(rowMeans(country_data_imp[28:31], na.rm = T))
max(country_data_imp[24:27], na.rm = T)
country_data_imp[1, 25] <- NA
country_data_imp$FBD_gen <- rowMeans(country_data_imp[,24:27], na.rm = T)
country_data_imp$FBD_res <- rowMeans(country_data_imp[,28:31], na.rm = T)
# Import in Parameters and Set Baseline Parms -----------------------------
setwd("//csce.datastore.ed.ac.uk/csce/biology/users/s1678248/PhD/Chapter_3/Models/Chapter-3/Model_Fit_Data/Part2/betaha/inch")
post_amp <- read.csv(tail(list.files(path = "//csce.datastore.ed.ac.uk/csce/biology/users/s1678248/PhD/Chapter_3/Models/Chapter-3/Model_Fit_Data/Part2/betaha/inch", pattern = "complex"), 1))
MAP_parms <- map_estimate(post_amp)
MAP_parms <- data.frame("Parameter" = names(post_amp),
"MAP_Estimate" = colMeans(post_amp))
# Baseline Parms ----------------------------------------------------------
thetaparm = c(ra = 60^-1, rh = (5.5^-1), ua = 240^-1, uh = 28835^-1, psi = 0.656,
share1 = country_data_imp[2,"Normalised_Usage_2018"], share2 = country_data_imp[3,"Normalised_Usage_2018"], share3 = country_data_imp[4,"Normalised_Usage_2018"],
share4 = country_data_imp[5,"Normalised_Usage_2018"], share5 = country_data_imp[6,"Normalised_Usage_2018"], share6 = country_data_imp[7,"Normalised_Usage_2018"],
share7 = country_data_imp[8,"Normalised_Usage_2018"], share8 = country_data_imp[9,"Normalised_Usage_2018"],
share9 = country_data_imp[10,"Normalised_Usage_2018"], share_nEU = 1 - sum(country_data_imp[2:10,"Normalised_Usage_2018"]),
betaAA = MAP_parms["betaAA", 2], phi = MAP_parms["phi", 2], kappa = MAP_parms["kappa", 2], alpha = MAP_parms["alpha", 2],
zeta = MAP_parms["zeta", 2], betaHA = MAP_parms["betaHA", 2], imp_nEU = MAP_parms["imp_nEU", 2], propres_impnEU = MAP_parms["propres_impnEU", 2],
fracimp1 = country_data_imp[2,"FBD_gen"], fracimp2 = country_data_imp[3,"FBD_gen"], fracimp3 = country_data_imp[4,"FBD_gen"],
fracimp4 = country_data_imp[5,"FBD_gen"], fracimp5 = country_data_imp[6,"FBD_gen"], fracimp6 = country_data_imp[7,"FBD_gen"],
fracimp7 = country_data_imp[8,"FBD_gen"], fracimp8 = country_data_imp[9,"FBD_gen"],
fracimp9 = country_data_imp[9,"FBD_gen"], fracimp_nEU = country_data_imp[10,"FBD_gen"],
propres_imp1 = country_data_imp[2,"FBD_res"], propres_imp2 = country_data_imp[3,"FBD_res"], propres_imp3 = country_data_imp[4,"FBD_res"], propres_imp4 = country_data_imp[5,"FBD_res"],
propres_imp5 = country_data_imp[6,"FBD_res"], propres_imp6 = country_data_imp[7,"FBD_res"], propres_imp7 = country_data_imp[8,"FBD_res"], propres_imp8 = country_data_imp[9,"FBD_res"],
propres_imp9 = country_data_imp[10,"FBD_res"],
eta = 0.11016, tau = UK_amp_usage)
init = c(Sa=0.98, Isa=0.01, Ira=0.01,
Sh = 1,
IshDA = 0,IrhDA = 0,
IshA1 = 0,IrhA1 = 0,
IshA2 = 0,IrhA2 = 0,
IshA3 = 0,IrhA3 = 0,
IshA4 = 0,IrhA4 = 0,
IshA5 = 0,IrhA5 = 0,
IshA6 = 0,IrhA6 = 0,
IshA7 = 0,IrhA7 = 0,
IshA8 = 0,IrhA8 = 0,
IshA9 = 0,IrhA9 = 0,
IshAnEU = 0,IrhAnEU = 0)
out <- runsteady(y = init, func = amrimp, times = c(0, Inf), parms = thetaparm)
# Eta Analysis ------------------------------------------------------------
eta_range <- seq(0, 0.5, 0.025)
output1 <- data.frame(matrix(nrow = length(eta_range), ncol = 5))
for(i in 1:length(eta_range)) {
thetaparm[["eta"]] <- eta_range[i]
out <- runsteady(y = init, func = amrimp, times = c(0, Inf), parms = thetaparm)
output1[i,] <- c(eta_range[i],
(sum(out[[1]][2:3]))*thetaparm[["eta"]],
out[[1]][2]*thetaparm[["eta"]],
out[[1]][3]*thetaparm[["eta"]],
out[[1]][3] / (out[[1]][2] + out[[1]][3]))
}
colnames(output1) <- c("eta", "total", "sens", "res", "resprop")
plotdata <- melt(output1, id.vars = c("eta"), measure.vars = c("sens","res"))
eta_anal <- ggplot(plotdata, aes(fill = variable, x = eta, y = value)) + theme_bw() +
geom_col(color = "black",position= "stack", width  = 0.025) + scale_x_continuous(expand = c(0, 0.025)) +
scale_y_continuous(limits = c(0,0.2), expand = c(0, 0))  +
geom_text(label= c(round(output1$resprop, digits = 2), rep("",length(eta_range))), vjust=-0.75,
position = "stack") +
theme(legend.position=c(0.7, 0.875), legend.text=element_text(size=12), legend.title = element_blank(), axis.text=element_text(size=12),
axis.title.y=element_text(size=12), axis.title.x= element_text(size=12), plot.margin = unit(c(0.35,1,0.35,1), "cm"),
legend.spacing.x = unit(0.3, 'cm')) +
scale_fill_manual(labels = c("Sensitive Domestic Carcass Contamination", "Resistant Domestic Carcass Contamination"), values = c("#F8766D", "#619CFF")) +
labs(x = expression(paste("Reduction in Livestock Carriage to Carcass Prevalence (", eta, ")")),
y = "Proportion of Domestic Livestock Carcasses Contaminated")
ggsave(eta_anal, filename = "eta_anal.png", dpi = 300, type = "cairo", width = 9, height = 6, units = "in",
path = "//csce.datastore.ed.ac.uk/csce/biology/users/s1678248/PhD/Chapter_3/Models/Chapter-3/Figures")
library("deSolve"); library("ggplot2"); library("plotly"); library("reshape2")
library("bayestestR"); library("tmvtnorm"); library("ggpubr")
rm(list=ls())
setwd("//csce.datastore.ed.ac.uk/csce/biology/users/s1678248/PhD/Chapter_3/Models/Chapter-3/Model_Fit_Data/Part2/betaha")
# Posterior Distributions -------------------------------------------------
post_dist_names <- grep("complex",
list.files("//csce.datastore.ed.ac.uk/csce/biology/users/s1678248/PhD/Chapter_3/Models/Chapter-3/Model_Fit_Data/Part2/betaha/inch"), value = TRUE)
#final_amp_post <- read.csv(tail(grep(list.files(), pattern =  "amppigs_gen", value = TRUE),1))
post_dist <- lapply(post_dist_names, read.csv)
post_dist <- mapply(cbind, post_dist, "gen" = sapply(1:length(post_dist), function(x) paste0("gen_", x)),
SIMPLIFY=F)
post_dist <- do.call("rbind", post_dist)
maps_est <- data.frame("Parameters" = colnames(post_dist[post_dist$gen == tail(unique(post_dist$gen),1),][1:8]),
"MAP_Estimate" = colMeans(post_dist[post_dist$gen == tail(unique(post_dist$gen),1),][1:8]))
p_list <- list()
for(i in 1:(length(post_dist)-1)) {
p_list[[i]] <- local ({
name_exp <- post_dist[,c(i,9)]
p <- ggplot(name_exp, aes(x= name_exp[,1], fill=gen)) + geom_density(alpha=.5) +  theme_bw()  +
geom_vline(xintercept = maps_est[i,2], size = 1.2, col = "red") +
scale_x_continuous(expand = c(0, 0), name = c(expression(paste("Rate of Animal-to-Animal Transmission (", beta[AA], ")")),
expression(paste("Rate of Resistance Reversion (", phi, ")")),
expression(paste("Efficacy of Antibiotic-Mediated Recovery (", kappa, ")")),
expression(paste("Antibiotic-Resistant Fitness Cost (", alpha, ")")),
expression(paste("Background Infection Rate (", zeta, ")")),
expression(paste("Rate of Animal-to-Human Transmission (", beta[HA], ")")),
expression(paste("Proportion of Contaminated Imports (", Frac[Imp], ")")),
expression(paste("Proportion of Ampicillin-Resistant Cont Imports (", PropRes[Imp], ")")))[i]) +
scale_y_continuous(expand = c(0, 0), name = " ") +
theme(legend.text=element_text(size=10), axis.text.x=element_text(size=10),axis.ticks.y=element_blank(), axis.text.y=element_blank(),
axis.title.y=element_text(size=10), axis.title.x= element_text(size=10), plot.margin = unit(c(0.25,0.4,0.15,0.55), "cm"),
plot.title = element_text(size = 12, vjust = 3, hjust = 0.5, face = "bold")) +
labs(fill = "Generation")
return(p)
})
}
abc <- ggarrange(p_list[[1]], p_list[[2]],
p_list[[3]], p_list[[4]],
p_list[[5]], p_list[[6]],
p_list[[7]], p_list[[8]],
nrow = 4, ncol =2,
font.label = c(size = 20), common.legend = TRUE, legend = "bottom",
align = "hv", vjust = 1.05)
ggsave(abc, filename = "ABC_SMC_Post_het.png", dpi = 300, width = 9, height = 8, units = "in",
path = "//csce.datastore.ed.ac.uk/csce/biology/users/s1678248/PhD/Chapter_3/Models/Chapter-3/Figures")
# Pairs Plot --------------------------------------------------------------
final_amp_post <- read.csv(tail(grep(list.files(), pattern =  "complex", value = TRUE),1))
plot_lower <- function(data, mapping){
p <- ggplot(data = data, mapping = mapping) + scale_x_continuous(expand = c(0,0))  + scale_y_continuous(expand = c(0,0)) +
stat_density2d(aes(fill=..density..), geom="tile", contour = FALSE) +
scale_fill_gradientn(colours=viridis::viridis(100))
return(p)
}
plot_diag <- function(data, mapping){
p <- ggplot(data = data, mapping = mapping) + scale_x_continuous(expand = c(0,0))  +
geom_density(fill = "grey", alpha = 0.3, size = 1.2) + theme_bw()
return(p)
}
plot_amppig <- GGally::ggpairs(final_amp_post, lower=list(continuous=plot_lower), diag = list(continuous = plot_diag)) + theme_bw()
ggsave(plot_amppig, filename = "pairs_plot_amppig_hetero.png", dpi = 300, type = "cairo", width = 8, height = 8, units = "in",
path = "//csce.datastore.ed.ac.uk/csce/biology/users/s1678248/PhD/Chapter_3/Models/Chapter-3/Figures")
# Diagnostic Plots -------------------------------------------------------
ampRDS <- lapply(list.files(pattern = ".RDS"), readRDS)[[1]]
#Create a list of the RDSs
p_diag_list <- local({
pre_plist <- list()
#Distances
dist_dat <- data.frame("dist" = sapply(1:8, function(x) ampRDS[[x]][[1]]), "gen" = sapply(1:8, function(x) paste0("gen", x)))
dist_dat$accept_perc <- (1000/dist_dat$dist)*100
#Summary Statistics
sum_diag <- as.data.frame(cbind(t(sapply(1:8, function(x) colMeans(ampRDS[[x]][[2]]))/c(1, 0.593, 0.2075134, 0.02865329, 0.4166667)),
t(sapply(1:8, function(x) apply(ampRDS[[x]][[2]], 2, min))/c(1, 0.593, 0.2075134, 0.02865329, 0.4166667)),
t(sapply(1:8, function(x) apply(ampRDS[[x]][[2]], 2, max))/c(1, 0.593, 0.2075134, 0.02865329, 0.4166667))))
colnames(sum_diag) <- c("mean_dist","mean_IncH","mean_ResPropHum", "mean_LiveCont", "mean_ResPropAnim",
"low_dist","low_IncH","low_ResPropHum", "low_LiveCont", "low_ResPropAnim",
"high_dist","high_IncH","high_ResPropHum", "high_LiveCont", "high_ResPropAnim")
sum_diag$gen <- seq(1,8)
pre_plist[[1]] <- ggplot(sum_diag, aes(y = mean_dist, x = gen)) +
geom_ribbon(aes(ymin = low_dist, ymax = high_dist), inherit.aes = TRUE , alpha = 0.5) + geom_line(size = 1.2)+
scale_x_continuous(expand = c(0,0), name = "Generation") + scale_y_continuous(expand = c(0,0), name = "Average Sum of Squared Distances")
pre_plist[[2]] <-  ggplot(sum_diag, aes(y = mean_IncH, x = gen)) +
geom_ribbon(aes(ymin = low_IncH, ymax = high_IncH), inherit.aes = TRUE , alpha = 0.5) + geom_line(size = 1.2)+
scale_x_continuous(expand = c(0,0), name = "Generation") + scale_y_continuous(expand = c(0,0), limits = c(0,1), name = "Distance from Target Incidence Value")
pre_plist[[3]] <- ggplot(sum_diag, aes(y = mean_ResPropHum, x = gen)) +
geom_ribbon(aes(ymin = low_ResPropHum, ymax = high_ResPropHum), inherit.aes = TRUE , alpha = 0.5) + geom_line(size = 1.2) +
scale_x_continuous(expand = c(0,0), name = "Generation") + scale_y_continuous(expand = c(0,0), name = "Distance from Target ResPropHum Value") + coord_cartesian(ylim  = c(0,1))
pre_plist[[4]] <-  ggplot(sum_diag, aes(y = mean_LiveCont, x = gen)) +
geom_ribbon(aes(ymin = low_LiveCont, ymax = high_LiveCont), inherit.aes = TRUE , alpha = 0.5) + geom_line(size = 1.2)+
scale_x_continuous(expand = c(0,0), name = "Generation") + scale_y_continuous(expand = c(0,0), limits = c(0,1), name = "Distance from Target Livestock Cont Value")
pre_plist[[5]] <- ggplot(sum_diag, aes(y = mean_ResPropAnim, x = gen)) +
geom_ribbon(aes(ymin = low_ResPropAnim, ymax = high_ResPropAnim), inherit.aes = TRUE , alpha = 0.5) + geom_line(size = 1.2) +
scale_x_continuous(expand = c(0,0), name = "Generation") + scale_y_continuous(expand = c(0,0), name = "Distance from Target ResPropAnim Value") + coord_cartesian(ylim  = c(0,1))
return(pre_plist)
})
diag_plots <- ggarrange(p_diag_list[[1]], p_diag_list[[2]], p_diag_list[[3]], p_diag_list[[4]],
p_diag_list[[5]], NULL,
ncol = 2, nrow = 3)
ggsave(diag_plots, filename = "diag_plots_heterofit.png", dpi = 300, width = 8, height = 11, units = "in",
path = "//csce.datastore.ed.ac.uk/csce/biology/users/s1678248/PhD/Chapter_3/Models/Chapter-3/Figures")
setwd("//csce.datastore.ed.ac.uk/csce/biology/users/s1678248/PhD/Chapter_3/Models/Chapter-3/Model_Fit_Data/Part2/betaha/inch")
library("deSolve"); library("ggplot2"); library("plotly"); library("reshape2")
library("bayestestR"); library("tmvtnorm"); library("ggpubr")
rm(list=ls())
setwd("//csce.datastore.ed.ac.uk/csce/biology/users/s1678248/PhD/Chapter_3/Models/Chapter-3/Model_Fit_Data/Part2/betaha/inch")
# Posterior Distributions -------------------------------------------------
post_dist_names <- grep("complex",
list.files("//csce.datastore.ed.ac.uk/csce/biology/users/s1678248/PhD/Chapter_3/Models/Chapter-3/Model_Fit_Data/Part2/betaha/inch"), value = TRUE)
#final_amp_post <- read.csv(tail(grep(list.files(), pattern =  "amppigs_gen", value = TRUE),1))
post_dist <- lapply(post_dist_names, read.csv)
post_dist <- mapply(cbind, post_dist, "gen" = sapply(1:length(post_dist), function(x) paste0("gen_", x)),
SIMPLIFY=F)
post_dist <- do.call("rbind", post_dist)
maps_est <- data.frame("Parameters" = colnames(post_dist[post_dist$gen == tail(unique(post_dist$gen),1),][1:8]),
"MAP_Estimate" = colMeans(post_dist[post_dist$gen == tail(unique(post_dist$gen),1),][1:8]))
p_list <- list()
for(i in 1:(length(post_dist)-1)) {
p_list[[i]] <- local ({
name_exp <- post_dist[,c(i,9)]
p <- ggplot(name_exp, aes(x= name_exp[,1], fill=gen)) + geom_density(alpha=.5) +  theme_bw()  +
geom_vline(xintercept = maps_est[i,2], size = 1.2, col = "red") +
scale_x_continuous(expand = c(0, 0), name = c(expression(paste("Rate of Animal-to-Animal Transmission (", beta[AA], ")")),
expression(paste("Rate of Resistance Reversion (", phi, ")")),
expression(paste("Efficacy of Antibiotic-Mediated Recovery (", kappa, ")")),
expression(paste("Antibiotic-Resistant Fitness Cost (", alpha, ")")),
expression(paste("Background Infection Rate (", zeta, ")")),
expression(paste("Rate of Animal-to-Human Transmission (", beta[HA], ")")),
expression(paste("Proportion of Contaminated Imports (", Frac[Imp], ")")),
expression(paste("Proportion of Ampicillin-Resistant Cont Imports (", PropRes[Imp], ")")))[i]) +
scale_y_continuous(expand = c(0, 0), name = " ") +
theme(legend.text=element_text(size=10), axis.text.x=element_text(size=10),axis.ticks.y=element_blank(), axis.text.y=element_blank(),
axis.title.y=element_text(size=10), axis.title.x= element_text(size=10), plot.margin = unit(c(0.25,0.4,0.15,0.55), "cm"),
plot.title = element_text(size = 12, vjust = 3, hjust = 0.5, face = "bold")) +
labs(fill = "Generation")
return(p)
})
}
abc <- ggarrange(p_list[[1]], p_list[[2]],
p_list[[3]], p_list[[4]],
p_list[[5]], p_list[[6]],
p_list[[7]], p_list[[8]],
nrow = 4, ncol =2,
font.label = c(size = 20), common.legend = TRUE, legend = "bottom",
align = "hv", vjust = 1.05)
ggsave(abc, filename = "ABC_SMC_Post_het.png", dpi = 300, width = 9, height = 8, units = "in",
path = "//csce.datastore.ed.ac.uk/csce/biology/users/s1678248/PhD/Chapter_3/Models/Chapter-3/Figures")
# Pairs Plot --------------------------------------------------------------
final_amp_post <- read.csv(tail(grep(list.files(), pattern =  "complex", value = TRUE),1))
plot_lower <- function(data, mapping){
p <- ggplot(data = data, mapping = mapping) + scale_x_continuous(expand = c(0,0))  + scale_y_continuous(expand = c(0,0)) +
stat_density2d(aes(fill=..density..), geom="tile", contour = FALSE) +
scale_fill_gradientn(colours=viridis::viridis(100))
return(p)
}
plot_diag <- function(data, mapping){
p <- ggplot(data = data, mapping = mapping) + scale_x_continuous(expand = c(0,0))  +
geom_density(fill = "grey", alpha = 0.3, size = 1.2) + theme_bw()
return(p)
}
plot_amppig <- GGally::ggpairs(final_amp_post, lower=list(continuous=plot_lower), diag = list(continuous = plot_diag)) + theme_bw()
ggsave(plot_amppig, filename = "pairs_plot_amppig_hetero.png", dpi = 300, type = "cairo", width = 8, height = 8, units = "in",
path = "//csce.datastore.ed.ac.uk/csce/biology/users/s1678248/PhD/Chapter_3/Models/Chapter-3/Figures")
# Diagnostic Plots -------------------------------------------------------
ampRDS <- lapply(list.files(pattern = ".RDS"), readRDS)[[1]]
#Create a list of the RDSs
p_diag_list <- local({
pre_plist <- list()
#Distances
dist_dat <- data.frame("dist" = sapply(1:8, function(x) ampRDS[[x]][[1]]), "gen" = sapply(1:8, function(x) paste0("gen", x)))
dist_dat$accept_perc <- (1000/dist_dat$dist)*100
#Summary Statistics
sum_diag <- as.data.frame(cbind(t(sapply(1:8, function(x) colMeans(ampRDS[[x]][[2]]))/c(1, 0.593, 0.2075134, 0.02865329, 0.4166667)),
t(sapply(1:8, function(x) apply(ampRDS[[x]][[2]], 2, min))/c(1, 0.593, 0.2075134, 0.02865329, 0.4166667)),
t(sapply(1:8, function(x) apply(ampRDS[[x]][[2]], 2, max))/c(1, 0.593, 0.2075134, 0.02865329, 0.4166667))))
colnames(sum_diag) <- c("mean_dist","mean_IncH","mean_ResPropHum", "mean_LiveCont", "mean_ResPropAnim",
"low_dist","low_IncH","low_ResPropHum", "low_LiveCont", "low_ResPropAnim",
"high_dist","high_IncH","high_ResPropHum", "high_LiveCont", "high_ResPropAnim")
sum_diag$gen <- seq(1,8)
pre_plist[[1]] <- ggplot(sum_diag, aes(y = mean_dist, x = gen)) +
geom_ribbon(aes(ymin = low_dist, ymax = high_dist), inherit.aes = TRUE , alpha = 0.5) + geom_line(size = 1.2)+
scale_x_continuous(expand = c(0,0), name = "Generation") + scale_y_continuous(expand = c(0,0), name = "Average Sum of Squared Distances")
pre_plist[[2]] <-  ggplot(sum_diag, aes(y = mean_IncH, x = gen)) +
geom_ribbon(aes(ymin = low_IncH, ymax = high_IncH), inherit.aes = TRUE , alpha = 0.5) + geom_line(size = 1.2)+
scale_x_continuous(expand = c(0,0), name = "Generation") + scale_y_continuous(expand = c(0,0), limits = c(0,1), name = "Distance from Target Incidence Value")
pre_plist[[3]] <- ggplot(sum_diag, aes(y = mean_ResPropHum, x = gen)) +
geom_ribbon(aes(ymin = low_ResPropHum, ymax = high_ResPropHum), inherit.aes = TRUE , alpha = 0.5) + geom_line(size = 1.2) +
scale_x_continuous(expand = c(0,0), name = "Generation") + scale_y_continuous(expand = c(0,0), name = "Distance from Target ResPropHum Value") + coord_cartesian(ylim  = c(0,1))
pre_plist[[4]] <-  ggplot(sum_diag, aes(y = mean_LiveCont, x = gen)) +
geom_ribbon(aes(ymin = low_LiveCont, ymax = high_LiveCont), inherit.aes = TRUE , alpha = 0.5) + geom_line(size = 1.2)+
scale_x_continuous(expand = c(0,0), name = "Generation") + scale_y_continuous(expand = c(0,0), limits = c(0,1), name = "Distance from Target Livestock Cont Value")
pre_plist[[5]] <- ggplot(sum_diag, aes(y = mean_ResPropAnim, x = gen)) +
geom_ribbon(aes(ymin = low_ResPropAnim, ymax = high_ResPropAnim), inherit.aes = TRUE , alpha = 0.5) + geom_line(size = 1.2) +
scale_x_continuous(expand = c(0,0), name = "Generation") + scale_y_continuous(expand = c(0,0), name = "Distance from Target ResPropAnim Value") + coord_cartesian(ylim  = c(0,1))
return(pre_plist)
})
diag_plots <- ggarrange(p_diag_list[[1]], p_diag_list[[2]], p_diag_list[[3]], p_diag_list[[4]],
p_diag_list[[5]], NULL,
ncol = 2, nrow = 3)
ggsave(diag_plots, filename = "diag_plots_heterofit.png", dpi = 300, width = 8, height = 11, units = "in",
path = "//csce.datastore.ed.ac.uk/csce/biology/users/s1678248/PhD/Chapter_3/Models/Chapter-3/Figures")
post_dist[,c(i,9)]
density(post_dist[,c(i,9)])
density(post_dist[,c(i,9)][,1])
post_dist[,c(i,9)][,1]
density(post_dist[,c(i,9)][,1])
density(post_dist[,c(i,9)][,1])[1]
density(post_dist[,c(i,9)][,1])[2]
density(post_dist[,c(i,9)][,1])[5]
max <- density(post_dist[,c(i,9)][,1])[5]
max <- density(post_dist[,c(i,9)][,1])
density(post_dist[,c(i,9)][,1])[1]
density(post_dist[,c(i,9)][,1])[2]
max <- max(density(post_dist[,c(i,9)][,1])[2])
for(i in 1:(length(post_dist)-1)) {
p_list[[i]] <- local ({
name_exp <- post_dist[,c(i,9)]
max <- max(density(post_dist[,c(i,9)][,1])[2])
p <- ggplot(name_exp, aes(x= name_exp[,1], fill=gen)) + geom_density(alpha=.5) +  theme_bw()  +
geom_vline(xintercept = maps_est[i,2], size = 1.2, col = "red") +
scale_x_continuous(expand = c(0, 0), name = c(expression(paste("Rate of Animal-to-Animal Transmission (", beta[AA], ")")),
expression(paste("Rate of Resistance Reversion (", phi, ")")),
expression(paste("Efficacy of Antibiotic-Mediated Recovery (", kappa, ")")),
expression(paste("Antibiotic-Resistant Fitness Cost (", alpha, ")")),
expression(paste("Background Infection Rate (", zeta, ")")),
expression(paste("Rate of Animal-to-Human Transmission (", beta[HA], ")")),
expression(paste("Proportion of Contaminated Imports (", Frac[Imp], ")")),
expression(paste("Proportion of Ampicillin-Resistant Cont Imports (", PropRes[Imp], ")")))[i]) +
scale_y_continuous(expand = c(0, 0), limits = c(0,max*1.2), name = " ") +
theme(legend.text=element_text(size=10), axis.text.x=element_text(size=10),axis.ticks.y=element_blank(), axis.text.y=element_blank(),
axis.title.y=element_text(size=10), axis.title.x= element_text(size=10), plot.margin = unit(c(0.25,0.4,0.15,0.55), "cm"),
plot.title = element_text(size = 12, vjust = 3, hjust = 0.5, face = "bold")) +
labs(fill = "Generation")
return(p)
})
}
max(density(post_dist[,c(i,9)][,1])[2])
density(post_dist[,c(i,9)][,1])[2]
for(i in 1:(length(post_dist)-1)) {
p_list[[i]] <- local ({
name_exp <- post_dist[,c(i,9)]
max <- max(density(post_dist[,c(i,9)][,1])[[2]])
p <- ggplot(name_exp, aes(x= name_exp[,1], fill=gen)) + geom_density(alpha=.5) +  theme_bw()  +
geom_vline(xintercept = maps_est[i,2], size = 1.2, col = "red") +
scale_x_continuous(expand = c(0, 0), name = c(expression(paste("Rate of Animal-to-Animal Transmission (", beta[AA], ")")),
expression(paste("Rate of Resistance Reversion (", phi, ")")),
expression(paste("Efficacy of Antibiotic-Mediated Recovery (", kappa, ")")),
expression(paste("Antibiotic-Resistant Fitness Cost (", alpha, ")")),
expression(paste("Background Infection Rate (", zeta, ")")),
expression(paste("Rate of Animal-to-Human Transmission (", beta[HA], ")")),
expression(paste("Proportion of Contaminated Imports (", Frac[Imp], ")")),
expression(paste("Proportion of Ampicillin-Resistant Cont Imports (", PropRes[Imp], ")")))[i]) +
scale_y_continuous(expand = c(0, 0), limits = c(0,max*1.2), name = " ") +
theme(legend.text=element_text(size=10), axis.text.x=element_text(size=10),axis.ticks.y=element_blank(), axis.text.y=element_blank(),
axis.title.y=element_text(size=10), axis.title.x= element_text(size=10), plot.margin = unit(c(0.25,0.4,0.15,0.55), "cm"),
plot.title = element_text(size = 12, vjust = 3, hjust = 0.5, face = "bold")) +
labs(fill = "Generation")
return(p)
})
}
p_list
post_dist[,c(i,9)]
post_dist[,c(i,9)]
name_exp[name_exp$gen == unique(ame_exp$gen)[j],]
name_exp <- post_dist[,c(i,9)]
name_exp[name_exp$gen == unique(ame_exp$gen)[j],]
name_exp[name_exp$gen == unique(name_exp$gen)[j],]
unique(name_exp$gen)[1]
name_exp[name_exp$gen == unique(name_exp$gen)[1],]
max(density(name_exp[name_exp$gen == unique(name_exp$gen)[1],])[[2]])
density(name_exp[name_exp$gen == unique(name_exp$gen)[1],])
name_exp[name_exp$gen == unique(name_exp$gen)
name_exp[name_exp$gen == unique(name_exp$gen)[1],]
name_exp[name_exp$gen == unique(name_exp$gen)[1],]
name_exp[name_exp$gen == unique(name_exp$gen)[1],1]
density(name_exp[name_exp$gen == unique(name_exp$gen)[1],1])
density(name_exp[name_exp$gen == unique(name_exp$gen)[1],1])[[2]]
max(density(name_exp[name_exp$gen == unique(name_exp$gen)[1],1])[[2]])
dens <- c()
for (j in 1:8){
dens[j] <- max(density(name_exp[name_exp$gen == unique(name_exp$gen)[j],1])[[2]])
}
dens
p_list <- list()
for(i in 1:(length(post_dist)-1)) {
p_list[[i]] <- local ({
name_exp <- post_dist[,c(i,9)]
dens <- c()
for (j in 1:8){
dens[j] <- max(density(name_exp[name_exp$gen == unique(name_exp$gen)[j],1])[[2]])
}
max <- max(density(post_dist[,c(i,9)][,1])[[2]])
p <- ggplot(name_exp, aes(x= name_exp[,1], fill=gen)) + geom_density(alpha=.5) +  theme_bw()  +
geom_vline(xintercept = maps_est[i,2], size = 1.2, col = "red") +
scale_x_continuous(expand = c(0, 0), name = c(expression(paste("Rate of Animal-to-Animal Transmission (", beta[AA], ")")),
expression(paste("Rate of Resistance Reversion (", phi, ")")),
expression(paste("Efficacy of Antibiotic-Mediated Recovery (", kappa, ")")),
expression(paste("Antibiotic-Resistant Fitness Cost (", alpha, ")")),
expression(paste("Background Infection Rate (", zeta, ")")),
expression(paste("Rate of Animal-to-Human Transmission (", beta[HA], ")")),
expression(paste("Proportion of Contaminated Imports (", Frac[Imp], ")")),
expression(paste("Proportion of Ampicillin-Resistant Cont Imports (", PropRes[Imp], ")")))[i]) +
scale_y_continuous(expand = c(0, 0), limits = c(0,max(dens)*1.2), name = " ") +
theme(legend.text=element_text(size=10), axis.text.x=element_text(size=10),axis.ticks.y=element_blank(), axis.text.y=element_blank(),
axis.title.y=element_text(size=10), axis.title.x= element_text(size=10), plot.margin = unit(c(0.25,0.4,0.15,0.55), "cm"),
plot.title = element_text(size = 12, vjust = 3, hjust = 0.5, face = "bold")) +
labs(fill = "Generation")
return(p)
})
}
p_list
abc <- ggarrange(p_list[[1]], p_list[[2]],
p_list[[3]], p_list[[4]],
p_list[[5]], p_list[[6]],
p_list[[7]], p_list[[8]],
nrow = 4, ncol =2,
font.label = c(size = 20), common.legend = TRUE, legend = "bottom",
align = "hv", vjust = 1.05)
ggsave(abc, filename = "ABC_SMC_Post_het.png", dpi = 300, width = 9, height = 8, units = "in",
path = "//csce.datastore.ed.ac.uk/csce/biology/users/s1678248/PhD/Chapter_3/Models/Chapter-3/Figures")
# Pairs Plot --------------------------------------------------------------
final_amp_post <- read.csv(tail(grep(list.files(), pattern =  "complex", value = TRUE),1))
plot_lower <- function(data, mapping){
p <- ggplot(data = data, mapping = mapping) + scale_x_continuous(expand = c(0,0))  + scale_y_continuous(expand = c(0,0)) +
stat_density2d(aes(fill=..density..), geom="tile", contour = FALSE) +
scale_fill_gradientn(colours=viridis::viridis(100))
return(p)
}
plot_diag <- function(data, mapping){
p <- ggplot(data = data, mapping = mapping) + scale_x_continuous(expand = c(0,0))  +
geom_density(fill = "grey", alpha = 0.3, size = 1.2) + theme_bw()
return(p)
}
plot_amppig <- GGally::ggpairs(final_amp_post, lower=list(continuous=plot_lower), diag = list(continuous = plot_diag)) + theme_bw()
ggsave(plot_amppig, filename = "pairs_plot_amppig_hetero.png", dpi = 300, type = "cairo", width = 8, height = 8, units = "in",
path = "//csce.datastore.ed.ac.uk/csce/biology/users/s1678248/PhD/Chapter_3/Models/Chapter-3/Figures")
# Diagnostic Plots -------------------------------------------------------
ampRDS <- lapply(list.files(pattern = ".RDS"), readRDS)[[1]]
#Create a list of the RDSs
p_diag_list <- local({
pre_plist <- list()
#Distances
dist_dat <- data.frame("dist" = sapply(1:8, function(x) ampRDS[[x]][[1]]), "gen" = sapply(1:8, function(x) paste0("gen", x)))
dist_dat$accept_perc <- (1000/dist_dat$dist)*100
#Summary Statistics
sum_diag <- as.data.frame(cbind(t(sapply(1:8, function(x) colMeans(ampRDS[[x]][[2]]))/c(1, 0.593, 0.2075134, 0.02865329, 0.4166667)),
t(sapply(1:8, function(x) apply(ampRDS[[x]][[2]], 2, min))/c(1, 0.593, 0.2075134, 0.02865329, 0.4166667)),
t(sapply(1:8, function(x) apply(ampRDS[[x]][[2]], 2, max))/c(1, 0.593, 0.2075134, 0.02865329, 0.4166667))))
colnames(sum_diag) <- c("mean_dist","mean_IncH","mean_ResPropHum", "mean_LiveCont", "mean_ResPropAnim",
"low_dist","low_IncH","low_ResPropHum", "low_LiveCont", "low_ResPropAnim",
"high_dist","high_IncH","high_ResPropHum", "high_LiveCont", "high_ResPropAnim")
sum_diag$gen <- seq(1,8)
pre_plist[[1]] <- ggplot(sum_diag, aes(y = mean_dist, x = gen)) +
geom_ribbon(aes(ymin = low_dist, ymax = high_dist), inherit.aes = TRUE , alpha = 0.5) + geom_line(size = 1.2)+
scale_x_continuous(expand = c(0,0), name = "Generation") + scale_y_continuous(expand = c(0,0), name = "Average Sum of Squared Distances")
pre_plist[[2]] <-  ggplot(sum_diag, aes(y = mean_IncH, x = gen)) +
geom_ribbon(aes(ymin = low_IncH, ymax = high_IncH), inherit.aes = TRUE , alpha = 0.5) + geom_line(size = 1.2)+
scale_x_continuous(expand = c(0,0), name = "Generation") + scale_y_continuous(expand = c(0,0), limits = c(0,1), name = "Distance from Target Incidence Value")
pre_plist[[3]] <- ggplot(sum_diag, aes(y = mean_ResPropHum, x = gen)) +
geom_ribbon(aes(ymin = low_ResPropHum, ymax = high_ResPropHum), inherit.aes = TRUE , alpha = 0.5) + geom_line(size = 1.2) +
scale_x_continuous(expand = c(0,0), name = "Generation") + scale_y_continuous(expand = c(0,0), name = "Distance from Target ResPropHum Value") + coord_cartesian(ylim  = c(0,1))
pre_plist[[4]] <-  ggplot(sum_diag, aes(y = mean_LiveCont, x = gen)) +
geom_ribbon(aes(ymin = low_LiveCont, ymax = high_LiveCont), inherit.aes = TRUE , alpha = 0.5) + geom_line(size = 1.2)+
scale_x_continuous(expand = c(0,0), name = "Generation") + scale_y_continuous(expand = c(0,0), limits = c(0,1), name = "Distance from Target Livestock Cont Value")
pre_plist[[5]] <- ggplot(sum_diag, aes(y = mean_ResPropAnim, x = gen)) +
geom_ribbon(aes(ymin = low_ResPropAnim, ymax = high_ResPropAnim), inherit.aes = TRUE , alpha = 0.5) + geom_line(size = 1.2) +
scale_x_continuous(expand = c(0,0), name = "Generation") + scale_y_continuous(expand = c(0,0), name = "Distance from Target ResPropAnim Value") + coord_cartesian(ylim  = c(0,1))
return(pre_plist)
})
diag_plots <- ggarrange(p_diag_list[[1]], p_diag_list[[2]], p_diag_list[[3]], p_diag_list[[4]],
p_diag_list[[5]], NULL,
ncol = 2, nrow = 3)
ggsave(diag_plots, filename = "diag_plots_heterofit.png", dpi = 300, width = 8, height = 11, units = "in",
path = "//csce.datastore.ed.ac.uk/csce/biology/users/s1678248/PhD/Chapter_3/Models/Chapter-3/Figures")
library("deSolve"); library("ggplot2"); library("plotly"); library("reshape2")
library("bayestestR"); library("tmvtnorm"); library("ggpubr")
rm(list=ls())
setwd("//csce.datastore.ed.ac.uk/csce/biology/users/s1678248/PhD/Chapter_3/Models/Chapter-3/Model_Fit_Data/Part1/betaha")
# Posterior Distributions -------------------------------------------------
post_dist_names <- grep("amppigs_gen",
list.files("//csce.datastore.ed.ac.uk/csce/biology/users/s1678248/PhD/Chapter_3/Models/Chapter-3/Model_Fit_Data/Part1/betaha"), value = TRUE)
#final_amp_post <- read.csv(tail(grep(list.files(), pattern =  "amppigs_gen", value = TRUE),1))
post_dist <- lapply(post_dist_names, read.csv)
post_dist <- mapply(cbind, post_dist, "gen" = sapply(1:length(post_dist), function(x) paste0("gen_", x)),
SIMPLIFY=F)
post_dist <- do.call("rbind", post_dist)
maps_est <- data.frame("Parameters" = colnames(post_dist[post_dist$gen == tail(unique(post_dist$gen),1),][1:6]),
"MAP_Estimate" = colMeans(post_dist[post_dist$gen == tail(unique(post_dist$gen),1),][1:6]))
p_list <- list()
for(i in 1:(length(post_dist)-1)) {
p_list[[i]] <- local ({
name_exp <- post_dist[,c(i,7)]
dens <- c()
for (j in 1:8){
dens[j] <- max(density(name_exp[name_exp$gen == unique(name_exp$gen)[j],1])[[2]])
}
p <- ggplot(name_exp, aes(x= name_exp[,1], fill=gen)) + geom_density(alpha=.5) +  theme_bw()  +
geom_vline(xintercept = maps_est[i,2], size = 1.2, col = "red") +
scale_x_continuous(expand = c(0, 0), name = c(expression(paste("Rate of Animal-to-Animal Transmission (", beta[AA], ")")),
expression(paste("Rate of Resistance Reversion (", phi, ")")),
expression(paste("Efficacy of Antibiotic-Mediated Recovery (", kappa, ")")),
expression(paste("Antibiotic-Resistant Fitness Cost (", alpha, ")")),
expression(paste("Background Infection Rate (", zeta, ")")),
expression(paste("Rate of Animal-to-Human Transmission (", beta[HA], ")")))[i]) +
scale_y_continuous(expand = c(0, 0), limits = c(0,max(dens)*1.2), name = " ") +
theme(legend.text=element_text(size=10), axis.text.x=element_text(size=10),axis.ticks.y=element_blank(), axis.text.y=element_blank(),
axis.title.y=element_text(size=10), axis.title.x= element_text(size=10), plot.margin = unit(c(0.25,0.4,0.15,0.55), "cm"),
plot.title = element_text(size = 12, vjust = 3, hjust = 0.5, face = "bold")) +
labs(fill = "Generation")
return(p)
})
}
abc <- ggarrange(p_list[[1]], p_list[[2]],
p_list[[3]], p_list[[4]],
p_list[[5]], p_list[[6]],
nrow = 3, ncol =2,
font.label = c(size = 20), common.legend = TRUE, legend = "bottom",
align = "hv", vjust = 1.05)
ggsave(abc, filename = "ABC_SMC_Post_homo.png", dpi = 300, width = 8, height = 8, units = "in",
path = "//csce.datastore.ed.ac.uk/csce/biology/users/s1678248/PhD/Chapter_3/Models/Chapter-3/Figures")
